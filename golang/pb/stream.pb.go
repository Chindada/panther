// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: stream/stream.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ShioajiEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RespCode      int64                  `protobuf:"varint,1,opt,name=resp_code,json=respCode,proto3" json:"resp_code,omitempty"`
	EventCode     int64                  `protobuf:"varint,2,opt,name=event_code,json=eventCode,proto3" json:"event_code,omitempty"`
	Info          string                 `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	Event         string                 `protobuf:"bytes,4,opt,name=event,proto3" json:"event,omitempty"`
	EventTime     string                 `protobuf:"bytes,5,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShioajiEvent) Reset() {
	*x = ShioajiEvent{}
	mi := &file_stream_stream_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShioajiEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShioajiEvent) ProtoMessage() {}

func (x *ShioajiEvent) ProtoReflect() protoreflect.Message {
	mi := &file_stream_stream_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShioajiEvent.ProtoReflect.Descriptor instead.
func (*ShioajiEvent) Descriptor() ([]byte, []int) {
	return file_stream_stream_proto_rawDescGZIP(), []int{0}
}

func (x *ShioajiEvent) GetRespCode() int64 {
	if x != nil {
		return x.RespCode
	}
	return 0
}

func (x *ShioajiEvent) GetEventCode() int64 {
	if x != nil {
		return x.EventCode
	}
	return 0
}

func (x *ShioajiEvent) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *ShioajiEvent) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *ShioajiEvent) GetEventTime() string {
	if x != nil {
		return x.EventTime
	}
	return ""
}

type FutureTick struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Code            string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	DateTime        string                 `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"`
	Open            float64                `protobuf:"fixed64,3,opt,name=open,proto3" json:"open,omitempty"`
	UnderlyingPrice float64                `protobuf:"fixed64,4,opt,name=underlying_price,json=underlyingPrice,proto3" json:"underlying_price,omitempty"`
	BidSideTotalVol int64                  `protobuf:"varint,5,opt,name=bid_side_total_vol,json=bidSideTotalVol,proto3" json:"bid_side_total_vol,omitempty"`
	AskSideTotalVol int64                  `protobuf:"varint,6,opt,name=ask_side_total_vol,json=askSideTotalVol,proto3" json:"ask_side_total_vol,omitempty"`
	AvgPrice        float64                `protobuf:"fixed64,7,opt,name=avg_price,json=avgPrice,proto3" json:"avg_price,omitempty"`
	Close           float64                `protobuf:"fixed64,8,opt,name=close,proto3" json:"close,omitempty"`
	High            float64                `protobuf:"fixed64,9,opt,name=high,proto3" json:"high,omitempty"`
	Low             float64                `protobuf:"fixed64,10,opt,name=low,proto3" json:"low,omitempty"`
	Amount          float64                `protobuf:"fixed64,11,opt,name=amount,proto3" json:"amount,omitempty"`
	TotalAmount     float64                `protobuf:"fixed64,12,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	Volume          int64                  `protobuf:"varint,13,opt,name=volume,proto3" json:"volume,omitempty"`
	TotalVolume     int64                  `protobuf:"varint,14,opt,name=total_volume,json=totalVolume,proto3" json:"total_volume,omitempty"`
	TickType        int64                  `protobuf:"varint,15,opt,name=tick_type,json=tickType,proto3" json:"tick_type,omitempty"`
	ChgType         int64                  `protobuf:"varint,16,opt,name=chg_type,json=chgType,proto3" json:"chg_type,omitempty"`
	PriceChg        float64                `protobuf:"fixed64,17,opt,name=price_chg,json=priceChg,proto3" json:"price_chg,omitempty"`
	PctChg          float64                `protobuf:"fixed64,18,opt,name=pct_chg,json=pctChg,proto3" json:"pct_chg,omitempty"`
	Simtrade        bool                   `protobuf:"varint,19,opt,name=simtrade,proto3" json:"simtrade,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FutureTick) Reset() {
	*x = FutureTick{}
	mi := &file_stream_stream_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FutureTick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FutureTick) ProtoMessage() {}

func (x *FutureTick) ProtoReflect() protoreflect.Message {
	mi := &file_stream_stream_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FutureTick.ProtoReflect.Descriptor instead.
func (*FutureTick) Descriptor() ([]byte, []int) {
	return file_stream_stream_proto_rawDescGZIP(), []int{1}
}

func (x *FutureTick) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *FutureTick) GetDateTime() string {
	if x != nil {
		return x.DateTime
	}
	return ""
}

func (x *FutureTick) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *FutureTick) GetUnderlyingPrice() float64 {
	if x != nil {
		return x.UnderlyingPrice
	}
	return 0
}

func (x *FutureTick) GetBidSideTotalVol() int64 {
	if x != nil {
		return x.BidSideTotalVol
	}
	return 0
}

func (x *FutureTick) GetAskSideTotalVol() int64 {
	if x != nil {
		return x.AskSideTotalVol
	}
	return 0
}

func (x *FutureTick) GetAvgPrice() float64 {
	if x != nil {
		return x.AvgPrice
	}
	return 0
}

func (x *FutureTick) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *FutureTick) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *FutureTick) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *FutureTick) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *FutureTick) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *FutureTick) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *FutureTick) GetTotalVolume() int64 {
	if x != nil {
		return x.TotalVolume
	}
	return 0
}

func (x *FutureTick) GetTickType() int64 {
	if x != nil {
		return x.TickType
	}
	return 0
}

func (x *FutureTick) GetChgType() int64 {
	if x != nil {
		return x.ChgType
	}
	return 0
}

func (x *FutureTick) GetPriceChg() float64 {
	if x != nil {
		return x.PriceChg
	}
	return 0
}

func (x *FutureTick) GetPctChg() float64 {
	if x != nil {
		return x.PctChg
	}
	return 0
}

func (x *FutureTick) GetSimtrade() bool {
	if x != nil {
		return x.Simtrade
	}
	return false
}

var File_stream_stream_proto protoreflect.FileDescriptor

const file_stream_stream_proto_rawDesc = "" +
	"\n" +
	"\x13stream/stream.proto\x12\x06stream\"\x93\x01\n" +
	"\fShioajiEvent\x12\x1b\n" +
	"\tresp_code\x18\x01 \x01(\x03R\brespCode\x12\x1d\n" +
	"\n" +
	"event_code\x18\x02 \x01(\x03R\teventCode\x12\x12\n" +
	"\x04info\x18\x03 \x01(\tR\x04info\x12\x14\n" +
	"\x05event\x18\x04 \x01(\tR\x05event\x12\x1d\n" +
	"\n" +
	"event_time\x18\x05 \x01(\tR\teventTime\"\xaf\x04\n" +
	"\n" +
	"FutureTick\x12\x12\n" +
	"\x04code\x18\x01 \x01(\tR\x04code\x12\x1b\n" +
	"\tdate_time\x18\x02 \x01(\tR\bdateTime\x12\x12\n" +
	"\x04open\x18\x03 \x01(\x01R\x04open\x12)\n" +
	"\x10underlying_price\x18\x04 \x01(\x01R\x0funderlyingPrice\x12+\n" +
	"\x12bid_side_total_vol\x18\x05 \x01(\x03R\x0fbidSideTotalVol\x12+\n" +
	"\x12ask_side_total_vol\x18\x06 \x01(\x03R\x0faskSideTotalVol\x12\x1b\n" +
	"\tavg_price\x18\a \x01(\x01R\bavgPrice\x12\x14\n" +
	"\x05close\x18\b \x01(\x01R\x05close\x12\x12\n" +
	"\x04high\x18\t \x01(\x01R\x04high\x12\x10\n" +
	"\x03low\x18\n" +
	" \x01(\x01R\x03low\x12\x16\n" +
	"\x06amount\x18\v \x01(\x01R\x06amount\x12!\n" +
	"\ftotal_amount\x18\f \x01(\x01R\vtotalAmount\x12\x16\n" +
	"\x06volume\x18\r \x01(\x03R\x06volume\x12!\n" +
	"\ftotal_volume\x18\x0e \x01(\x03R\vtotalVolume\x12\x1b\n" +
	"\ttick_type\x18\x0f \x01(\x03R\btickType\x12\x19\n" +
	"\bchg_type\x18\x10 \x01(\x03R\achgType\x12\x1b\n" +
	"\tprice_chg\x18\x11 \x01(\x01R\bpriceChg\x12\x17\n" +
	"\apct_chg\x18\x12 \x01(\x01R\x06pctChg\x12\x1a\n" +
	"\bsimtrade\x18\x13 \x01(\bR\bsimtradeB\x06Z\x04./pbb\x06proto3"

var (
	file_stream_stream_proto_rawDescOnce sync.Once
	file_stream_stream_proto_rawDescData []byte
)

func file_stream_stream_proto_rawDescGZIP() []byte {
	file_stream_stream_proto_rawDescOnce.Do(func() {
		file_stream_stream_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_stream_stream_proto_rawDesc), len(file_stream_stream_proto_rawDesc)))
	})
	return file_stream_stream_proto_rawDescData
}

var file_stream_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_stream_stream_proto_goTypes = []any{
	(*ShioajiEvent)(nil), // 0: stream.ShioajiEvent
	(*FutureTick)(nil),   // 1: stream.FutureTick
}
var file_stream_stream_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_stream_stream_proto_init() }
func file_stream_stream_proto_init() {
	if File_stream_stream_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_stream_stream_proto_rawDesc), len(file_stream_stream_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_stream_stream_proto_goTypes,
		DependencyIndexes: file_stream_stream_proto_depIdxs,
		MessageInfos:      file_stream_stream_proto_msgTypes,
	}.Build()
	File_stream_stream_proto = out.File
	file_stream_stream_proto_goTypes = nil
	file_stream_stream_proto_depIdxs = nil
}
