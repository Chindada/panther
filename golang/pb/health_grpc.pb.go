// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: health/health.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BasicDataInterface_HealthChannel_FullMethodName = "/health.BasicDataInterface/HealthChannel"
)

// BasicDataInterfaceClient is the client API for BasicDataInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BasicDataInterfaceClient interface {
	HealthChannel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[emptypb.Empty, emptypb.Empty], error)
}

type basicDataInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewBasicDataInterfaceClient(cc grpc.ClientConnInterface) BasicDataInterfaceClient {
	return &basicDataInterfaceClient{cc}
}

func (c *basicDataInterfaceClient) HealthChannel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[emptypb.Empty, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BasicDataInterface_ServiceDesc.Streams[0], BasicDataInterface_HealthChannel_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BasicDataInterface_HealthChannelClient = grpc.BidiStreamingClient[emptypb.Empty, emptypb.Empty]

// BasicDataInterfaceServer is the server API for BasicDataInterface service.
// All implementations must embed UnimplementedBasicDataInterfaceServer
// for forward compatibility.
type BasicDataInterfaceServer interface {
	HealthChannel(grpc.BidiStreamingServer[emptypb.Empty, emptypb.Empty]) error
	mustEmbedUnimplementedBasicDataInterfaceServer()
}

// UnimplementedBasicDataInterfaceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBasicDataInterfaceServer struct{}

func (UnimplementedBasicDataInterfaceServer) HealthChannel(grpc.BidiStreamingServer[emptypb.Empty, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method HealthChannel not implemented")
}
func (UnimplementedBasicDataInterfaceServer) mustEmbedUnimplementedBasicDataInterfaceServer() {}
func (UnimplementedBasicDataInterfaceServer) testEmbeddedByValue()                            {}

// UnsafeBasicDataInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BasicDataInterfaceServer will
// result in compilation errors.
type UnsafeBasicDataInterfaceServer interface {
	mustEmbedUnimplementedBasicDataInterfaceServer()
}

func RegisterBasicDataInterfaceServer(s grpc.ServiceRegistrar, srv BasicDataInterfaceServer) {
	// If the following call pancis, it indicates UnimplementedBasicDataInterfaceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BasicDataInterface_ServiceDesc, srv)
}

func _BasicDataInterface_HealthChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BasicDataInterfaceServer).HealthChannel(&grpc.GenericServerStream[emptypb.Empty, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BasicDataInterface_HealthChannelServer = grpc.BidiStreamingServer[emptypb.Empty, emptypb.Empty]

// BasicDataInterface_ServiceDesc is the grpc.ServiceDesc for BasicDataInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BasicDataInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "health.BasicDataInterface",
	HandlerType: (*BasicDataInterfaceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HealthChannel",
			Handler:       _BasicDataInterface_HealthChannel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "health/health.proto",
}
