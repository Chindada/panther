// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: stream/stream.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StreamInterface_SubscribeShioajiEvent_FullMethodName = "/stream.StreamInterface/SubscribeShioajiEvent"
	StreamInterface_SubscribeFutureTick_FullMethodName   = "/stream.StreamInterface/SubscribeFutureTick"
	StreamInterface_SubscribeFutureBidAsk_FullMethodName = "/stream.StreamInterface/SubscribeFutureBidAsk"
)

// StreamInterfaceClient is the client API for StreamInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamInterfaceClient interface {
	SubscribeShioajiEvent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ShioajiEvent], error)
	SubscribeFutureTick(ctx context.Context, in *SubscribeFutureRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FutureTick], error)
	SubscribeFutureBidAsk(ctx context.Context, in *SubscribeFutureRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FutureBidAsk], error)
}

type streamInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamInterfaceClient(cc grpc.ClientConnInterface) StreamInterfaceClient {
	return &streamInterfaceClient{cc}
}

func (c *streamInterfaceClient) SubscribeShioajiEvent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ShioajiEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamInterface_ServiceDesc.Streams[0], StreamInterface_SubscribeShioajiEvent_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, ShioajiEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamInterface_SubscribeShioajiEventClient = grpc.ServerStreamingClient[ShioajiEvent]

func (c *streamInterfaceClient) SubscribeFutureTick(ctx context.Context, in *SubscribeFutureRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FutureTick], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamInterface_ServiceDesc.Streams[1], StreamInterface_SubscribeFutureTick_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeFutureRequest, FutureTick]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamInterface_SubscribeFutureTickClient = grpc.ServerStreamingClient[FutureTick]

func (c *streamInterfaceClient) SubscribeFutureBidAsk(ctx context.Context, in *SubscribeFutureRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FutureBidAsk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamInterface_ServiceDesc.Streams[2], StreamInterface_SubscribeFutureBidAsk_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeFutureRequest, FutureBidAsk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamInterface_SubscribeFutureBidAskClient = grpc.ServerStreamingClient[FutureBidAsk]

// StreamInterfaceServer is the server API for StreamInterface service.
// All implementations must embed UnimplementedStreamInterfaceServer
// for forward compatibility.
type StreamInterfaceServer interface {
	SubscribeShioajiEvent(*emptypb.Empty, grpc.ServerStreamingServer[ShioajiEvent]) error
	SubscribeFutureTick(*SubscribeFutureRequest, grpc.ServerStreamingServer[FutureTick]) error
	SubscribeFutureBidAsk(*SubscribeFutureRequest, grpc.ServerStreamingServer[FutureBidAsk]) error
	mustEmbedUnimplementedStreamInterfaceServer()
}

// UnimplementedStreamInterfaceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStreamInterfaceServer struct{}

func (UnimplementedStreamInterfaceServer) SubscribeShioajiEvent(*emptypb.Empty, grpc.ServerStreamingServer[ShioajiEvent]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeShioajiEvent not implemented")
}
func (UnimplementedStreamInterfaceServer) SubscribeFutureTick(*SubscribeFutureRequest, grpc.ServerStreamingServer[FutureTick]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeFutureTick not implemented")
}
func (UnimplementedStreamInterfaceServer) SubscribeFutureBidAsk(*SubscribeFutureRequest, grpc.ServerStreamingServer[FutureBidAsk]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeFutureBidAsk not implemented")
}
func (UnimplementedStreamInterfaceServer) mustEmbedUnimplementedStreamInterfaceServer() {}
func (UnimplementedStreamInterfaceServer) testEmbeddedByValue()                         {}

// UnsafeStreamInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamInterfaceServer will
// result in compilation errors.
type UnsafeStreamInterfaceServer interface {
	mustEmbedUnimplementedStreamInterfaceServer()
}

func RegisterStreamInterfaceServer(s grpc.ServiceRegistrar, srv StreamInterfaceServer) {
	// If the following call pancis, it indicates UnimplementedStreamInterfaceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StreamInterface_ServiceDesc, srv)
}

func _StreamInterface_SubscribeShioajiEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamInterfaceServer).SubscribeShioajiEvent(m, &grpc.GenericServerStream[emptypb.Empty, ShioajiEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamInterface_SubscribeShioajiEventServer = grpc.ServerStreamingServer[ShioajiEvent]

func _StreamInterface_SubscribeFutureTick_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeFutureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamInterfaceServer).SubscribeFutureTick(m, &grpc.GenericServerStream[SubscribeFutureRequest, FutureTick]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamInterface_SubscribeFutureTickServer = grpc.ServerStreamingServer[FutureTick]

func _StreamInterface_SubscribeFutureBidAsk_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeFutureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamInterfaceServer).SubscribeFutureBidAsk(m, &grpc.GenericServerStream[SubscribeFutureRequest, FutureBidAsk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamInterface_SubscribeFutureBidAskServer = grpc.ServerStreamingServer[FutureBidAsk]

// StreamInterface_ServiceDesc is the grpc.ServiceDesc for StreamInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stream.StreamInterface",
	HandlerType: (*StreamInterfaceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeShioajiEvent",
			Handler:       _StreamInterface_SubscribeShioajiEvent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeFutureTick",
			Handler:       _StreamInterface_SubscribeFutureTick_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeFutureBidAsk",
			Handler:       _StreamInterface_SubscribeFutureBidAsk_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stream/stream.proto",
}
