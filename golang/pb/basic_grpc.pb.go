// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: basic/basic.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BasicDataInterface_HealthCheck_FullMethodName        = "/basic.BasicDataInterface/HealthCheck"
	BasicDataInterface_GetAllStockDetail_FullMethodName  = "/basic.BasicDataInterface/GetAllStockDetail"
	BasicDataInterface_GetAllFutureDetail_FullMethodName = "/basic.BasicDataInterface/GetAllFutureDetail"
	BasicDataInterface_GetAllOptionDetail_FullMethodName = "/basic.BasicDataInterface/GetAllOptionDetail"
)

// BasicDataInterfaceClient is the client API for BasicDataInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BasicDataInterfaceClient interface {
	HealthCheck(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[emptypb.Empty, emptypb.Empty], error)
	GetAllStockDetail(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StockDetailList, error)
	GetAllFutureDetail(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FutureDetailList, error)
	GetAllOptionDetail(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OptionDetailList, error)
}

type basicDataInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewBasicDataInterfaceClient(cc grpc.ClientConnInterface) BasicDataInterfaceClient {
	return &basicDataInterfaceClient{cc}
}

func (c *basicDataInterfaceClient) HealthCheck(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[emptypb.Empty, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BasicDataInterface_ServiceDesc.Streams[0], BasicDataInterface_HealthCheck_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BasicDataInterface_HealthCheckClient = grpc.ClientStreamingClient[emptypb.Empty, emptypb.Empty]

func (c *basicDataInterfaceClient) GetAllStockDetail(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StockDetailList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockDetailList)
	err := c.cc.Invoke(ctx, BasicDataInterface_GetAllStockDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicDataInterfaceClient) GetAllFutureDetail(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FutureDetailList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FutureDetailList)
	err := c.cc.Invoke(ctx, BasicDataInterface_GetAllFutureDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicDataInterfaceClient) GetAllOptionDetail(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OptionDetailList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OptionDetailList)
	err := c.cc.Invoke(ctx, BasicDataInterface_GetAllOptionDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasicDataInterfaceServer is the server API for BasicDataInterface service.
// All implementations must embed UnimplementedBasicDataInterfaceServer
// for forward compatibility.
type BasicDataInterfaceServer interface {
	HealthCheck(grpc.ClientStreamingServer[emptypb.Empty, emptypb.Empty]) error
	GetAllStockDetail(context.Context, *emptypb.Empty) (*StockDetailList, error)
	GetAllFutureDetail(context.Context, *emptypb.Empty) (*FutureDetailList, error)
	GetAllOptionDetail(context.Context, *emptypb.Empty) (*OptionDetailList, error)
	mustEmbedUnimplementedBasicDataInterfaceServer()
}

// UnimplementedBasicDataInterfaceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBasicDataInterfaceServer struct{}

func (UnimplementedBasicDataInterfaceServer) HealthCheck(grpc.ClientStreamingServer[emptypb.Empty, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedBasicDataInterfaceServer) GetAllStockDetail(context.Context, *emptypb.Empty) (*StockDetailList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStockDetail not implemented")
}
func (UnimplementedBasicDataInterfaceServer) GetAllFutureDetail(context.Context, *emptypb.Empty) (*FutureDetailList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFutureDetail not implemented")
}
func (UnimplementedBasicDataInterfaceServer) GetAllOptionDetail(context.Context, *emptypb.Empty) (*OptionDetailList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOptionDetail not implemented")
}
func (UnimplementedBasicDataInterfaceServer) mustEmbedUnimplementedBasicDataInterfaceServer() {}
func (UnimplementedBasicDataInterfaceServer) testEmbeddedByValue()                            {}

// UnsafeBasicDataInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BasicDataInterfaceServer will
// result in compilation errors.
type UnsafeBasicDataInterfaceServer interface {
	mustEmbedUnimplementedBasicDataInterfaceServer()
}

func RegisterBasicDataInterfaceServer(s grpc.ServiceRegistrar, srv BasicDataInterfaceServer) {
	// If the following call pancis, it indicates UnimplementedBasicDataInterfaceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BasicDataInterface_ServiceDesc, srv)
}

func _BasicDataInterface_HealthCheck_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BasicDataInterfaceServer).HealthCheck(&grpc.GenericServerStream[emptypb.Empty, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BasicDataInterface_HealthCheckServer = grpc.ClientStreamingServer[emptypb.Empty, emptypb.Empty]

func _BasicDataInterface_GetAllStockDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicDataInterfaceServer).GetAllStockDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasicDataInterface_GetAllStockDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicDataInterfaceServer).GetAllStockDetail(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasicDataInterface_GetAllFutureDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicDataInterfaceServer).GetAllFutureDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasicDataInterface_GetAllFutureDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicDataInterfaceServer).GetAllFutureDetail(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasicDataInterface_GetAllOptionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicDataInterfaceServer).GetAllOptionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasicDataInterface_GetAllOptionDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicDataInterfaceServer).GetAllOptionDetail(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BasicDataInterface_ServiceDesc is the grpc.ServiceDesc for BasicDataInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BasicDataInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "basic.BasicDataInterface",
	HandlerType: (*BasicDataInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllStockDetail",
			Handler:    _BasicDataInterface_GetAllStockDetail_Handler,
		},
		{
			MethodName: "GetAllFutureDetail",
			Handler:    _BasicDataInterface_GetAllFutureDetail_Handler,
		},
		{
			MethodName: "GetAllOptionDetail",
			Handler:    _BasicDataInterface_GetAllOptionDetail_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HealthCheck",
			Handler:       _BasicDataInterface_HealthCheck_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "basic/basic.proto",
}
