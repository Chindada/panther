// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: basic/basic.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BasicInterface_GetAllStockDetail_FullMethodName  = "/basic.BasicInterface/GetAllStockDetail"
	BasicInterface_GetAllFutureDetail_FullMethodName = "/basic.BasicInterface/GetAllFutureDetail"
	BasicInterface_GetAllOptionDetail_FullMethodName = "/basic.BasicInterface/GetAllOptionDetail"
)

// BasicInterfaceClient is the client API for BasicInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BasicInterfaceClient interface {
	GetAllStockDetail(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StockDetailList, error)
	GetAllFutureDetail(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FutureDetailList, error)
	GetAllOptionDetail(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OptionDetailList, error)
}

type basicInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewBasicInterfaceClient(cc grpc.ClientConnInterface) BasicInterfaceClient {
	return &basicInterfaceClient{cc}
}

func (c *basicInterfaceClient) GetAllStockDetail(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StockDetailList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockDetailList)
	err := c.cc.Invoke(ctx, BasicInterface_GetAllStockDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicInterfaceClient) GetAllFutureDetail(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FutureDetailList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FutureDetailList)
	err := c.cc.Invoke(ctx, BasicInterface_GetAllFutureDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicInterfaceClient) GetAllOptionDetail(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OptionDetailList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OptionDetailList)
	err := c.cc.Invoke(ctx, BasicInterface_GetAllOptionDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasicInterfaceServer is the server API for BasicInterface service.
// All implementations must embed UnimplementedBasicInterfaceServer
// for forward compatibility.
type BasicInterfaceServer interface {
	GetAllStockDetail(context.Context, *emptypb.Empty) (*StockDetailList, error)
	GetAllFutureDetail(context.Context, *emptypb.Empty) (*FutureDetailList, error)
	GetAllOptionDetail(context.Context, *emptypb.Empty) (*OptionDetailList, error)
	mustEmbedUnimplementedBasicInterfaceServer()
}

// UnimplementedBasicInterfaceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBasicInterfaceServer struct{}

func (UnimplementedBasicInterfaceServer) GetAllStockDetail(context.Context, *emptypb.Empty) (*StockDetailList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStockDetail not implemented")
}
func (UnimplementedBasicInterfaceServer) GetAllFutureDetail(context.Context, *emptypb.Empty) (*FutureDetailList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFutureDetail not implemented")
}
func (UnimplementedBasicInterfaceServer) GetAllOptionDetail(context.Context, *emptypb.Empty) (*OptionDetailList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOptionDetail not implemented")
}
func (UnimplementedBasicInterfaceServer) mustEmbedUnimplementedBasicInterfaceServer() {}
func (UnimplementedBasicInterfaceServer) testEmbeddedByValue()                        {}

// UnsafeBasicInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BasicInterfaceServer will
// result in compilation errors.
type UnsafeBasicInterfaceServer interface {
	mustEmbedUnimplementedBasicInterfaceServer()
}

func RegisterBasicInterfaceServer(s grpc.ServiceRegistrar, srv BasicInterfaceServer) {
	// If the following call pancis, it indicates UnimplementedBasicInterfaceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BasicInterface_ServiceDesc, srv)
}

func _BasicInterface_GetAllStockDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicInterfaceServer).GetAllStockDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasicInterface_GetAllStockDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicInterfaceServer).GetAllStockDetail(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasicInterface_GetAllFutureDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicInterfaceServer).GetAllFutureDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasicInterface_GetAllFutureDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicInterfaceServer).GetAllFutureDetail(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasicInterface_GetAllOptionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicInterfaceServer).GetAllOptionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasicInterface_GetAllOptionDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicInterfaceServer).GetAllOptionDetail(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BasicInterface_ServiceDesc is the grpc.ServiceDesc for BasicInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BasicInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "basic.BasicInterface",
	HandlerType: (*BasicInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllStockDetail",
			Handler:    _BasicInterface_GetAllStockDetail_Handler,
		},
		{
			MethodName: "GetAllFutureDetail",
			Handler:    _BasicInterface_GetAllFutureDetail_Handler,
		},
		{
			MethodName: "GetAllOptionDetail",
			Handler:    _BasicInterface_GetAllOptionDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "basic/basic.proto",
}
