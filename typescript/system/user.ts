// @generated by protobuf-ts 2.11.1 with parameter use_proto_field_name,long_type_number,force_client_none,server_none
// @generated from protobuf file "system/user.proto" (package "system", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../google/protobuf/timestamp";
/**
 * @generated from protobuf message system.BasicUser
 */
export interface BasicUser {
    /**
     * @generated from protobuf field: string email = 1
     */
    email: string;
    /**
     * @generated from protobuf field: string username = 2
     */
    username: string;
    /**
     * @generated from protobuf field: string password = 3
     */
    password: string;
    /**
     * @generated from protobuf field: system.UserRole role = 4
     */
    role: UserRole;
}
/**
 * @generated from protobuf message system.User
 */
export interface User {
    /**
     * @generated from protobuf field: int64 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: system.BasicUser basic = 2
     */
    basic?: BasicUser;
    /**
     * @generated from protobuf field: bool enable_totp = 3
     */
    enable_totp: boolean;
    /**
     * @generated from protobuf field: int64 totp_id = 4
     */
    totp_id: number;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 31
     */
    created_at?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 32
     */
    updated_at?: Timestamp;
}
/**
 * @generated from protobuf message system.UserList
 */
export interface UserList {
    /**
     * @generated from protobuf field: repeated system.User list = 1
     */
    list: User[];
}
/**
 * @generated from protobuf message system.Totp
 */
export interface Totp {
    /**
     * @generated from protobuf field: int64 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: string secret = 2
     */
    secret: string;
    /**
     * @generated from protobuf field: string qr_code = 3
     */
    qr_code: string;
}
/**
 * @generated from protobuf enum system.UserRole
 */
export enum UserRole {
    /**
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: USER = 1;
     */
    USER = 1,
    /**
     * @generated from protobuf enum value: ADMIN = 2;
     */
    ADMIN = 2,
    /**
     * @generated from protobuf enum value: ROOT = 3;
     */
    ROOT = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class BasicUser$Type extends MessageType<BasicUser> {
    constructor() {
        super("system.BasicUser", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "role", kind: "enum", T: () => ["system.UserRole", UserRole] }
        ]);
    }
    create(value?: PartialMessage<BasicUser>): BasicUser {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.email = "";
        message.username = "";
        message.password = "";
        message.role = 0;
        if (value !== undefined)
            reflectionMergePartial<BasicUser>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BasicUser): BasicUser {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                case /* string username */ 2:
                    message.username = reader.string();
                    break;
                case /* string password */ 3:
                    message.password = reader.string();
                    break;
                case /* system.UserRole role */ 4:
                    message.role = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BasicUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        /* string username = 2; */
        if (message.username !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.username);
        /* string password = 3; */
        if (message.password !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.password);
        /* system.UserRole role = 4; */
        if (message.role !== 0)
            writer.tag(4, WireType.Varint).int32(message.role);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message system.BasicUser
 */
export const BasicUser = new BasicUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User$Type extends MessageType<User> {
    constructor() {
        super("system.User", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "basic", kind: "message", T: () => BasicUser },
            { no: 3, name: "enable_totp", kind: "scalar", localName: "enable_totp", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "totp_id", kind: "scalar", localName: "totp_id", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 31, name: "created_at", kind: "message", localName: "created_at", T: () => Timestamp },
            { no: 32, name: "updated_at", kind: "message", localName: "updated_at", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<User>): User {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.enable_totp = false;
        message.totp_id = 0;
        if (value !== undefined)
            reflectionMergePartial<User>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User): User {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                case /* system.BasicUser basic */ 2:
                    message.basic = BasicUser.internalBinaryRead(reader, reader.uint32(), options, message.basic);
                    break;
                case /* bool enable_totp */ 3:
                    message.enable_totp = reader.bool();
                    break;
                case /* int64 totp_id */ 4:
                    message.totp_id = reader.int64().toNumber();
                    break;
                case /* google.protobuf.Timestamp created_at */ 31:
                    message.created_at = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.created_at);
                    break;
                case /* google.protobuf.Timestamp updated_at */ 32:
                    message.updated_at = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updated_at);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* system.BasicUser basic = 2; */
        if (message.basic)
            BasicUser.internalBinaryWrite(message.basic, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool enable_totp = 3; */
        if (message.enable_totp !== false)
            writer.tag(3, WireType.Varint).bool(message.enable_totp);
        /* int64 totp_id = 4; */
        if (message.totp_id !== 0)
            writer.tag(4, WireType.Varint).int64(message.totp_id);
        /* google.protobuf.Timestamp created_at = 31; */
        if (message.created_at)
            Timestamp.internalBinaryWrite(message.created_at, writer.tag(31, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp updated_at = 32; */
        if (message.updated_at)
            Timestamp.internalBinaryWrite(message.updated_at, writer.tag(32, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message system.User
 */
export const User = new User$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserList$Type extends MessageType<UserList> {
    constructor() {
        super("system.UserList", [
            { no: 1, name: "list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => User }
        ]);
    }
    create(value?: PartialMessage<UserList>): UserList {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.list = [];
        if (value !== undefined)
            reflectionMergePartial<UserList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserList): UserList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated system.User list */ 1:
                    message.list.push(User.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated system.User list = 1; */
        for (let i = 0; i < message.list.length; i++)
            User.internalBinaryWrite(message.list[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message system.UserList
 */
export const UserList = new UserList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Totp$Type extends MessageType<Totp> {
    constructor() {
        super("system.Totp", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "secret", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "qr_code", kind: "scalar", localName: "qr_code", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Totp>): Totp {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.secret = "";
        message.qr_code = "";
        if (value !== undefined)
            reflectionMergePartial<Totp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Totp): Totp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                case /* string secret */ 2:
                    message.secret = reader.string();
                    break;
                case /* string qr_code */ 3:
                    message.qr_code = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Totp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string secret = 2; */
        if (message.secret !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.secret);
        /* string qr_code = 3; */
        if (message.qr_code !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.qr_code);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message system.Totp
 */
export const Totp = new Totp$Type();
