// @generated by protobuf-ts 2.11.0 with parameter use_proto_field_name,long_type_number,force_client_none,server_none
// @generated from protobuf file "system/backup.proto" (package "system", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../google/protobuf/timestamp";
/**
 * @generated from protobuf message system.Backup
 */
export interface Backup {
    /**
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * @generated from protobuf field: string path = 2
     */
    path: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 3
     */
    created_at?: Timestamp;
}
/**
 * @generated from protobuf message system.BackupList
 */
export interface BackupList {
    /**
     * @generated from protobuf field: repeated system.Backup list = 1
     */
    list: Backup[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Backup$Type extends MessageType<Backup> {
    constructor() {
        super("system.Backup", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "created_at", kind: "message", localName: "created_at", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Backup>): Backup {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.path = "";
        if (value !== undefined)
            reflectionMergePartial<Backup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Backup): Backup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string path */ 2:
                    message.path = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 3:
                    message.created_at = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.created_at);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Backup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string path = 2; */
        if (message.path !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.path);
        /* google.protobuf.Timestamp created_at = 3; */
        if (message.created_at)
            Timestamp.internalBinaryWrite(message.created_at, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message system.Backup
 */
export const Backup = new Backup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BackupList$Type extends MessageType<BackupList> {
    constructor() {
        super("system.BackupList", [
            { no: 1, name: "list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Backup }
        ]);
    }
    create(value?: PartialMessage<BackupList>): BackupList {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.list = [];
        if (value !== undefined)
            reflectionMergePartial<BackupList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BackupList): BackupList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated system.Backup list */ 1:
                    message.list.push(Backup.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BackupList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated system.Backup list = 1; */
        for (let i = 0; i < message.list.length; i++)
            Backup.internalBinaryWrite(message.list[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message system.BackupList
 */
export const BackupList = new BackupList$Type();
