// @generated by protobuf-ts 2.11.1 with parameter use_proto_field_name,long_type_number,force_client_none,server_none
// @generated from protobuf file "auth/auth.proto" (package "auth", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * class APISecret(BaseModel):
 *     api_key: str
 *     api_key_secret: str
 *
 * @generated from protobuf message auth.APISecret
 */
export interface APISecret {
    /**
     * @generated from protobuf field: string api_key = 1
     */
    api_key: string;
    /**
     * @generated from protobuf field: string api_key_secret = 2
     */
    api_key_secret: string;
}
/**
 * class CASecret(BaseModel):
 *     person_id: str
 *     ca_path: str
 *     ca_password: str
 *
 * @generated from protobuf message auth.CASecret
 */
export interface CASecret {
    /**
     * @generated from protobuf field: string person_id = 1
     */
    person_id: string;
    /**
     * @generated from protobuf field: string ca_path = 2
     */
    ca_path: string;
    /**
     * @generated from protobuf field: string ca_password = 3
     */
    ca_password: string;
}
/**
 * class ShioajiAuth(BaseModel):
 *     name: str
 *     api_secret: APISecret
 *     ca_secret: CASecret
 *
 * @generated from protobuf message auth.ShioajiAuth
 */
export interface ShioajiAuth {
    /**
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * @generated from protobuf field: auth.APISecret api_secret = 2
     */
    api_secret?: APISecret;
    /**
     * @generated from protobuf field: auth.CASecret ca_secret = 3
     */
    ca_secret?: CASecret;
}
// @generated message type with reflection information, may provide speed optimized methods
class APISecret$Type extends MessageType<APISecret> {
    constructor() {
        super("auth.APISecret", [
            { no: 1, name: "api_key", kind: "scalar", localName: "api_key", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "api_key_secret", kind: "scalar", localName: "api_key_secret", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<APISecret>): APISecret {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.api_key = "";
        message.api_key_secret = "";
        if (value !== undefined)
            reflectionMergePartial<APISecret>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APISecret): APISecret {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string api_key */ 1:
                    message.api_key = reader.string();
                    break;
                case /* string api_key_secret */ 2:
                    message.api_key_secret = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: APISecret, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string api_key = 1; */
        if (message.api_key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.api_key);
        /* string api_key_secret = 2; */
        if (message.api_key_secret !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.api_key_secret);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.APISecret
 */
export const APISecret = new APISecret$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CASecret$Type extends MessageType<CASecret> {
    constructor() {
        super("auth.CASecret", [
            { no: 1, name: "person_id", kind: "scalar", localName: "person_id", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ca_path", kind: "scalar", localName: "ca_path", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "ca_password", kind: "scalar", localName: "ca_password", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CASecret>): CASecret {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.person_id = "";
        message.ca_path = "";
        message.ca_password = "";
        if (value !== undefined)
            reflectionMergePartial<CASecret>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CASecret): CASecret {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string person_id */ 1:
                    message.person_id = reader.string();
                    break;
                case /* string ca_path */ 2:
                    message.ca_path = reader.string();
                    break;
                case /* string ca_password */ 3:
                    message.ca_password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CASecret, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string person_id = 1; */
        if (message.person_id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.person_id);
        /* string ca_path = 2; */
        if (message.ca_path !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.ca_path);
        /* string ca_password = 3; */
        if (message.ca_password !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.ca_password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.CASecret
 */
export const CASecret = new CASecret$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShioajiAuth$Type extends MessageType<ShioajiAuth> {
    constructor() {
        super("auth.ShioajiAuth", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "api_secret", kind: "message", localName: "api_secret", T: () => APISecret },
            { no: 3, name: "ca_secret", kind: "message", localName: "ca_secret", T: () => CASecret }
        ]);
    }
    create(value?: PartialMessage<ShioajiAuth>): ShioajiAuth {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<ShioajiAuth>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShioajiAuth): ShioajiAuth {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* auth.APISecret api_secret */ 2:
                    message.api_secret = APISecret.internalBinaryRead(reader, reader.uint32(), options, message.api_secret);
                    break;
                case /* auth.CASecret ca_secret */ 3:
                    message.ca_secret = CASecret.internalBinaryRead(reader, reader.uint32(), options, message.ca_secret);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShioajiAuth, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* auth.APISecret api_secret = 2; */
        if (message.api_secret)
            APISecret.internalBinaryWrite(message.api_secret, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* auth.CASecret ca_secret = 3; */
        if (message.ca_secret)
            CASecret.internalBinaryWrite(message.ca_secret, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.ShioajiAuth
 */
export const ShioajiAuth = new ShioajiAuth$Type();
