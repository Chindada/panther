// @generated by protobuf-ts 2.11.1 with parameter use_proto_field_name,long_type_number,force_client_none,server_none
// @generated from protobuf file "basic/option.proto" (package "basic", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * {
 *     "category": "TXO",
 *     "code": "TXO26600F5",
 *     "currency": "TWD",
 *     "day_trade": "No",
 *     "delivery_date": "2025/06/18",
 *     "delivery_month": "202506",
 *     "exchange": "TAIFEX",
 *     "limit_down": 0.1,
 *     "limit_up": 2220.0,
 *     "margin_trading_balance": 0,
 *     "multiplier": 0,
 *     "name": "\u81fa\u6307\u9078\u64c7\u6b0a06\u670826600C",
 *     "option_right": "C",
 *     "reference": 0.1,
 *     "security_type": "OPT",
 *     "short_selling_balance": 0,
 *     "strike_price": 26600.0,
 *     "symbol": "TXO20250626600C",
 *     "target_code": "",
 *     "underlying_code": "",
 *     "underlying_kind": "I",
 *     "unit": 1,
 *     "update_date": "2025/06/13"
 * }
 *
 * @generated from protobuf message basic.OptionDetail
 */
export interface OptionDetail {
    /**
     * @generated from protobuf field: string category = 1
     */
    category: string;
    /**
     * @generated from protobuf field: string code = 2
     */
    code: string;
    /**
     * @generated from protobuf field: string currency = 3
     */
    currency: string;
    /**
     * @generated from protobuf field: string day_trade = 4
     */
    day_trade: string;
    /**
     * @generated from protobuf field: string delivery_date = 5
     */
    delivery_date: string;
    /**
     * @generated from protobuf field: string delivery_month = 6
     */
    delivery_month: string;
    /**
     * @generated from protobuf field: string exchange = 7
     */
    exchange: string;
    /**
     * @generated from protobuf field: double limit_down = 8
     */
    limit_down: number;
    /**
     * @generated from protobuf field: double limit_up = 9
     */
    limit_up: number;
    /**
     * @generated from protobuf field: int64 margin_trading_balance = 10
     */
    margin_trading_balance: number;
    /**
     * @generated from protobuf field: int64 multiplier = 11
     */
    multiplier: number;
    /**
     * @generated from protobuf field: string name = 12
     */
    name: string;
    /**
     * @generated from protobuf field: string option_right = 13
     */
    option_right: string;
    /**
     * @generated from protobuf field: double reference = 14
     */
    reference: number;
    /**
     * @generated from protobuf field: string security_type = 15
     */
    security_type: string;
    /**
     * @generated from protobuf field: int64 short_selling_balance = 16
     */
    short_selling_balance: number;
    /**
     * @generated from protobuf field: double strike_price = 17
     */
    strike_price: number;
    /**
     * @generated from protobuf field: string symbol = 18
     */
    symbol: string;
    /**
     * @generated from protobuf field: string target_code = 19
     */
    target_code: string;
    /**
     * @generated from protobuf field: string underlying_code = 20
     */
    underlying_code: string;
    /**
     * @generated from protobuf field: string underlying_kind = 21
     */
    underlying_kind: string;
    /**
     * @generated from protobuf field: int64 unit = 22
     */
    unit: number;
    /**
     * @generated from protobuf field: string update_date = 23
     */
    update_date: string;
}
/**
 * @generated from protobuf message basic.OptionDetailList
 */
export interface OptionDetailList {
    /**
     * @generated from protobuf field: repeated basic.OptionDetail list = 1
     */
    list: OptionDetail[];
}
// @generated message type with reflection information, may provide speed optimized methods
class OptionDetail$Type extends MessageType<OptionDetail> {
    constructor() {
        super("basic.OptionDetail", [
            { no: 1, name: "category", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "currency", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "day_trade", kind: "scalar", localName: "day_trade", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "delivery_date", kind: "scalar", localName: "delivery_date", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "delivery_month", kind: "scalar", localName: "delivery_month", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "exchange", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "limit_down", kind: "scalar", localName: "limit_down", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 9, name: "limit_up", kind: "scalar", localName: "limit_up", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 10, name: "margin_trading_balance", kind: "scalar", localName: "margin_trading_balance", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 11, name: "multiplier", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 12, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "option_right", kind: "scalar", localName: "option_right", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "reference", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 15, name: "security_type", kind: "scalar", localName: "security_type", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "short_selling_balance", kind: "scalar", localName: "short_selling_balance", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 17, name: "strike_price", kind: "scalar", localName: "strike_price", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 18, name: "symbol", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "target_code", kind: "scalar", localName: "target_code", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "underlying_code", kind: "scalar", localName: "underlying_code", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "underlying_kind", kind: "scalar", localName: "underlying_kind", T: 9 /*ScalarType.STRING*/ },
            { no: 22, name: "unit", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 23, name: "update_date", kind: "scalar", localName: "update_date", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<OptionDetail>): OptionDetail {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.category = "";
        message.code = "";
        message.currency = "";
        message.day_trade = "";
        message.delivery_date = "";
        message.delivery_month = "";
        message.exchange = "";
        message.limit_down = 0;
        message.limit_up = 0;
        message.margin_trading_balance = 0;
        message.multiplier = 0;
        message.name = "";
        message.option_right = "";
        message.reference = 0;
        message.security_type = "";
        message.short_selling_balance = 0;
        message.strike_price = 0;
        message.symbol = "";
        message.target_code = "";
        message.underlying_code = "";
        message.underlying_kind = "";
        message.unit = 0;
        message.update_date = "";
        if (value !== undefined)
            reflectionMergePartial<OptionDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OptionDetail): OptionDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string category */ 1:
                    message.category = reader.string();
                    break;
                case /* string code */ 2:
                    message.code = reader.string();
                    break;
                case /* string currency */ 3:
                    message.currency = reader.string();
                    break;
                case /* string day_trade */ 4:
                    message.day_trade = reader.string();
                    break;
                case /* string delivery_date */ 5:
                    message.delivery_date = reader.string();
                    break;
                case /* string delivery_month */ 6:
                    message.delivery_month = reader.string();
                    break;
                case /* string exchange */ 7:
                    message.exchange = reader.string();
                    break;
                case /* double limit_down */ 8:
                    message.limit_down = reader.double();
                    break;
                case /* double limit_up */ 9:
                    message.limit_up = reader.double();
                    break;
                case /* int64 margin_trading_balance */ 10:
                    message.margin_trading_balance = reader.int64().toNumber();
                    break;
                case /* int64 multiplier */ 11:
                    message.multiplier = reader.int64().toNumber();
                    break;
                case /* string name */ 12:
                    message.name = reader.string();
                    break;
                case /* string option_right */ 13:
                    message.option_right = reader.string();
                    break;
                case /* double reference */ 14:
                    message.reference = reader.double();
                    break;
                case /* string security_type */ 15:
                    message.security_type = reader.string();
                    break;
                case /* int64 short_selling_balance */ 16:
                    message.short_selling_balance = reader.int64().toNumber();
                    break;
                case /* double strike_price */ 17:
                    message.strike_price = reader.double();
                    break;
                case /* string symbol */ 18:
                    message.symbol = reader.string();
                    break;
                case /* string target_code */ 19:
                    message.target_code = reader.string();
                    break;
                case /* string underlying_code */ 20:
                    message.underlying_code = reader.string();
                    break;
                case /* string underlying_kind */ 21:
                    message.underlying_kind = reader.string();
                    break;
                case /* int64 unit */ 22:
                    message.unit = reader.int64().toNumber();
                    break;
                case /* string update_date */ 23:
                    message.update_date = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OptionDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string category = 1; */
        if (message.category !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.category);
        /* string code = 2; */
        if (message.code !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.code);
        /* string currency = 3; */
        if (message.currency !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.currency);
        /* string day_trade = 4; */
        if (message.day_trade !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.day_trade);
        /* string delivery_date = 5; */
        if (message.delivery_date !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.delivery_date);
        /* string delivery_month = 6; */
        if (message.delivery_month !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.delivery_month);
        /* string exchange = 7; */
        if (message.exchange !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.exchange);
        /* double limit_down = 8; */
        if (message.limit_down !== 0)
            writer.tag(8, WireType.Bit64).double(message.limit_down);
        /* double limit_up = 9; */
        if (message.limit_up !== 0)
            writer.tag(9, WireType.Bit64).double(message.limit_up);
        /* int64 margin_trading_balance = 10; */
        if (message.margin_trading_balance !== 0)
            writer.tag(10, WireType.Varint).int64(message.margin_trading_balance);
        /* int64 multiplier = 11; */
        if (message.multiplier !== 0)
            writer.tag(11, WireType.Varint).int64(message.multiplier);
        /* string name = 12; */
        if (message.name !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.name);
        /* string option_right = 13; */
        if (message.option_right !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.option_right);
        /* double reference = 14; */
        if (message.reference !== 0)
            writer.tag(14, WireType.Bit64).double(message.reference);
        /* string security_type = 15; */
        if (message.security_type !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.security_type);
        /* int64 short_selling_balance = 16; */
        if (message.short_selling_balance !== 0)
            writer.tag(16, WireType.Varint).int64(message.short_selling_balance);
        /* double strike_price = 17; */
        if (message.strike_price !== 0)
            writer.tag(17, WireType.Bit64).double(message.strike_price);
        /* string symbol = 18; */
        if (message.symbol !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.symbol);
        /* string target_code = 19; */
        if (message.target_code !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.target_code);
        /* string underlying_code = 20; */
        if (message.underlying_code !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.underlying_code);
        /* string underlying_kind = 21; */
        if (message.underlying_kind !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.underlying_kind);
        /* int64 unit = 22; */
        if (message.unit !== 0)
            writer.tag(22, WireType.Varint).int64(message.unit);
        /* string update_date = 23; */
        if (message.update_date !== "")
            writer.tag(23, WireType.LengthDelimited).string(message.update_date);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message basic.OptionDetail
 */
export const OptionDetail = new OptionDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OptionDetailList$Type extends MessageType<OptionDetailList> {
    constructor() {
        super("basic.OptionDetailList", [
            { no: 1, name: "list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => OptionDetail }
        ]);
    }
    create(value?: PartialMessage<OptionDetailList>): OptionDetailList {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.list = [];
        if (value !== undefined)
            reflectionMergePartial<OptionDetailList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OptionDetailList): OptionDetailList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated basic.OptionDetail list */ 1:
                    message.list.push(OptionDetail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OptionDetailList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated basic.OptionDetail list = 1; */
        for (let i = 0; i < message.list.length; i++)
            OptionDetail.internalBinaryWrite(message.list[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message basic.OptionDetailList
 */
export const OptionDetailList = new OptionDetailList$Type();
